{"name":"Difflib.js","body":"Difflib.js\r\n==========\r\n\r\nA JavaScript module which provides classes and functions for comparing sequences. It can be used for example, for comparing files, and can produce difference information in various formats, including context and unified diffs. Ported from Python's [difflib](http://docs.python.org/library/difflib.html) module.\r\n\r\nInstallation\r\n------------\r\n\r\n#### Browser\r\n\r\nTo use it in the browser, you may download the [minified js file](https://github.com/qiao/difflib.js/raw/master/dist/difflib-browser.js) and include it in your webpage.\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"./difflib-browser.js\"></script>\r\n```\r\n\r\n#### Node.js\r\n\r\nFor Node.js, you can install it using Node Package Manager (npm):\r\n\r\n```bash\r\nnpm install difflib\r\n```\r\n\r\nThen, in your script:\r\n\r\n```js\r\nvar difflib = require('difflib');\r\n```\r\n\r\nQuick Examples\r\n--------------\r\n\r\n1. contextDiff\r\n\r\n    ```js\r\n    >>> s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n']\r\n    >>> s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n']\r\n    >>> difflib.contextDiff(s1, s2, {fromfile:'before.py', tofile:'after.py'})\r\n    [ '*** before.py\\n',\r\n      '--- after.py\\n',\r\n      '***************\\n',\r\n      '*** 1,4 ****\\n',\r\n      '! bacon\\n',\r\n      '! eggs\\n',\r\n      '! ham\\n',\r\n      '  guido\\n',\r\n      '--- 1,4 ----\\n',\r\n      '! python\\n',\r\n      '! eggy\\n',\r\n      '! hamster\\n',\r\n      '  guido\\n' ]\r\n    ```\r\n\r\n2. unifiedDiff\r\n\r\n    ```js\r\n    >>> difflib.unifiedDiff('one two three four'.split(' '),\r\n    ...                     'zero one tree four'.split(' '), {\r\n    ...                       fromfile: 'Original'\r\n    ...                       tofile: 'Current',\r\n    ...                       fromfiledate: '2005-01-26 23:30:50',\r\n    ...                       tofiledate: '2010-04-02 10:20:52',\r\n    ...                       lineterm: ''\r\n    ...                     })\r\n    [ '--- Original\\t2005-01-26 23:30:50',\r\n      '+++ Current\\t2010-04-02 10:20:52',\r\n      '@@ -1,4 +1,4 @@',\r\n      '+zero',\r\n      ' one',\r\n      '-two',\r\n      '-three',\r\n      '+tree',\r\n      ' four' ]\r\n    ```\r\n\r\n\r\n3. ndiff\r\n\r\n    ```js\r\n    >>> a = ['one\\n', 'two\\n', 'three\\n']\r\n    >>> b = ['ore\\n', 'tree\\n', 'emu\\n']\r\n    >>> difflib.ndiff(a, b)\r\n    [ '- one\\n',\r\n      '?  ^\\n',\r\n      '+ ore\\n',\r\n      '?  ^\\n',\r\n      '- two\\n',\r\n      '- three\\n',\r\n      '?  -\\n',\r\n      '+ tree\\n',\r\n      '+ emu\\n' ]\r\n    ```\r\n\r\n4. ratio\r\n\r\n    ```js\r\n    >>> s = new difflib.SequenceMatcher(null, 'abcd', 'bcde');\r\n    >>> s.ratio();\r\n    0.75\r\n    >>> s.quickRatio();\r\n    0.75\r\n    >>> s.realQuickRatio();\r\n    1.0\r\n    ```\r\n\r\n5. getOpcodes\r\n\r\n    ```js\r\n    >>> s = new difflib.SequenceMatcher(null, 'qabxcd', 'abycdf');\r\n    >>> s.getOpcodes();\r\n    [ [ 'delete'  , 0 , 1 , 0 , 0 ] ,\r\n      [ 'equal'   , 1 , 3 , 0 , 2 ] ,\r\n      [ 'replace' , 3 , 4 , 2 , 3 ] ,\r\n      [ 'equal'   , 4 , 6 , 3 , 5 ] ,\r\n      [ 'insert'  , 6 , 6 , 5 , 6 ] ]\r\n    ```\r\n\r\n6. getCloseMatches\r\n\r\n    ```js\r\n    >>> difflib.getCloseMatches('appel', ['ape', 'apple', 'peach', 'puppy'])\r\n    ['apple', 'ape']\r\n    ```\r\n\r\nDocumentation\r\n-------------\r\n\r\n* [SequenceMatcher](#SequenceMatcher)\r\n\r\n    * [setSeqs](#setSeqs)\r\n    * [setSeq1](#setSeq1)\r\n    * [setSeq2](#setSeq2)\r\n    * [findLongestMatch](#findLongestMatch)\r\n    * [getMatchingBlocks](#getMatchingBlocks)\r\n    * [getOpcodes](#getOpcodes)\r\n    * [getGroupedOpcodes](#getGroupedOpcodes)\r\n    * [ratio](#ratio)\r\n    * [quickRatio](#quickRatio)\r\n    * [realQuickRatio](#realQuickRatio)\r\n\r\n* [Differ](#Differ)\r\n\r\n    * [compare](#compare)\r\n\r\n* [contextDiff](#contextDiff)\r\n* [getCloseMatches](#getCloseMatches)\r\n* [ndiff](#ndiff)\r\n* [restore](#restore)\r\n* [unifiedDiff](#unifiedDiff)\r\n* [IS_LINE_JUNK](#IS_LINE_JUNK)\r\n* [IS_CHARACTER_JUNK](#IS_CHARACTER_JUNK)\r\n\r\n\r\n<a name=\"SequenceMatcher\" />\r\n### *class* difflib.**SequenceMatcher**([isjunk[, a[, b[, autojunk=true]]]])\r\n\r\nThis is a flexible class for comparing pairs of sequences of any type.\r\n\r\nOptional argument *isjunk* must be **null** (the default) or a one-argument function\r\nthat takes a sequence element and returns true if and only if the element is\r\n\"junk\" and should be ignored. \r\n\r\nPassing **null** for *isjunk* is equivalent to passing\r\n\r\n```js\r\nfunction(x) { return false; }; \r\n```\r\n\r\nin other words, no elements are ignored. \r\n\r\nFor example, pass:\r\n\r\n```js\r\nfunction(x) { return x == ' ' || x == '\\t'; }\r\n```\r\n\r\nif you're comparing lines as sequences of characters, \r\nand don’t want to synch up on blanks or hard tabs.\r\n\r\nThe optional arguments *a* and *b* are sequences to be compared;\r\nboth default to empty strings.\r\n\r\nThe optional argument *autojunk* can be used to disable the \r\nautomatic junk heuristic, which automatically treats certain sequence items as junk.\r\n\r\n\r\n<a name=\"setSeqs\" />\r\n#### setSeqs(a, b)\r\n\r\nSet the two sequences to be compared.\r\n\r\nSequenceMatcher computes and caches detailed information about the second\r\nsequence, so if you want to compare one sequence against many sequences,\r\nuse [setSeq2()](#setSeq2) to set the commonly used sequence once and call \r\n[setSeq1()](#setSeq1) repeatedly, once for each of the other sequences.\r\n\r\n<a name=\"setSeq1\" />\r\n#### setSeq1(a)\r\n\r\nSet the first sequence to be compared. The second sequence to be compared is not changed.\r\n\r\n<a name=\"setSeq2\" />\r\n#### setSeq2(a)\r\n\r\nSet the second sequence to be compared. The first sequence to be compared is not changed.\r\n\r\n<a name=\"findLongestMatch\" />\r\n#### findLongestMatch(alo, ahi, blo, bhi)\r\n\r\nFind longest matching block in `a[alo:ahi]` and `b[blo:bhi]`.\r\n\r\nIf *isjunk* was omitted or null, *findLongestMatch()* returns `[i, j, k]` such that \r\n`a[i:i+k]` is equal to `b[j:j+k]`, where `alo <= i <= i+k <= ahi` and \r\n`blo <= j <= j+k <= bhi`. \r\nFor all `[i', j', k']` meeting those conditions, the additional conditions `k >= k'`, \r\n`i <= i'`, and if `i == i'`, `j <= j'` are also met. \r\nIn other words, of all maximal matching blocks, return one that starts earliest in *a*,\r\nand of all those maximal matching blocks that start earliest in *a*, \r\nreturn the one that starts earliest in *b*.\r\n\r\n```js\r\n>>> s = new difflib.SequenceMatcher(null, \" abcd\", \"abcd abcd\");\r\n>>> s.findLongestMatch(0, 5, 0, 9);\r\n[0, 4, 5]\r\n```\r\n\r\nIf *isjunk* was provided, first the longest matching block is determined\r\nas above, but with the additional restriction that no junk element appears\r\nin the block. \r\nThen that block is extended as far as possible by matching (only) junk \r\nelements on both sides. So the resulting block never matches on junk \r\nexcept as identical junk happens to be adjacent to an interesting match.\r\n\r\nHere's the same example as before, but considering blanks to be junk. \r\nThat prevents `' abcd'` from matching the `' abcd'` at the tail end of \r\nthe second sequence directly. \r\nInstead only the `'abcd'` can match, and matches the leftmost `'abcd'` \r\nin the second sequence:\r\n\r\n```js\r\n>>> s = new difflib.SequenceMatcher(function(x) {return x == ' ';}, \" abcd\", \"abcd abcd\")\r\n>>> s.findLongestMatch(0, 5, 0, 9)\r\n[1, 0, 4]\r\n```\r\n\r\nIf no blocks match, this returns `[alo, blo, 0]`.\r\n\r\n\r\n<a name=\"getMatchingBlocks\" />\r\n#### getMatchingBlocks()\r\n\r\nReturn list of triples describing matching subsequences. \r\nEach triple is of the form `[i, j, n]`, and means that `a[i:i+n] == b[j:j+n]`. \r\nThe triples are monotonically increasing in *i* and *j*.\r\n\r\nThe last triple is a dummy, and has the value `[a.length, b.length, 0]`.\r\nIt is the only triple with `n == 0`. If `[i, j, n]` and `[i', j', n']` \r\nare adjacent triples in the list, and the second is not the last triple \r\nin the list, then `i+n != i'` or `j+n != j'`; \r\nin other words, adjacent triples always describe non-adjacent equal blocks.\r\n\r\n```js\r\n>>> s = new difflib.SequenceMatcher(null, \"abxcd\", \"abcd\")\r\n>>> s.getMatchingBlocks()\r\n[ [0, 0, 2], [3, 2, 2], [5, 4, 0] ]\r\n```\r\n\r\n<a name=\"getOpcodes\" />\r\n#### getOpcodes()\r\n\r\nReturn list of 5-tuples describing how to turn a into b. \r\nEach tuple is of the form `[tag, i1, i2, j1, j2]`. \r\nThe first tuple has `i1 == j1 == 0`, and remaining tuples \r\nhave *i1* equal to the *i2* from the preceding tuple, \r\nand, likewise, *j1* equal to the previous *j2*.\r\n\r\nThe tag values are strings, with these meanings:\r\n\r\n    Value       Meaning\r\n\r\n    'replace'   a[i1:i2] should be replaced by b[j1:j2].\r\n    'delete'    a[i1:i2] should be deleted. Note that j1 == j2 in this case.\r\n    'insert'    b[j1:j2] should be inserted at a[i1:i1]. Note that i1 == i2 in this case.\r\n    'equal'     a[i1:i2] == b[j1:j2] (the sub-sequences are equal).\r\n\r\n```js\r\n>>> s = new difflib.SequenceMatcher(null, 'qabxcd', 'abycdf');\r\n>>> s.getOpcodes();\r\n[ [ 'delete'  , 0 , 1 , 0 , 0 ] ,\r\n  [ 'equal'   , 1 , 3 , 0 , 2 ] ,\r\n  [ 'replace' , 3 , 4 , 2 , 3 ] ,\r\n  [ 'equal'   , 4 , 6 , 3 , 5 ] ,\r\n  [ 'insert'  , 6 , 6 , 5 , 6 ] ]\r\n```\r\n\r\n<a name=\"getGroupedOpcodes\" />\r\n#### getGroupedOpcodes([n])\r\n\r\nReturn a list groups with upto n (default is 3) lines of context.\r\nEach group is in the same format as returned by [getOpcodes()](#getOpcodes).\r\n\r\n<a name=\"ratio\" />\r\n#### ratio()\r\n\r\nReturn a measure of the sequences’ similarity as a float in the range [0, 1].\r\n\r\nWhere T is the total number of elements in both sequences, \r\nand M is the number of matches, this is 2.0*M / T. \r\nNote that this is `1.0` if the sequences are identical, \r\nand `0.0` if they have nothing in common.\r\n\r\nThis is expensive to compute if [getMatchingBlocks()](#getMatchingBlocks) or \r\n[getOpcodes()](#getOpcodes) hasn’t already been called, in which case \r\nyou may want to try [quickRatio()](#quickRatio) or \r\n[realQuickRatio()](#realQuickRatio) first to get an upper bound.\r\n\r\n<a name=\"quickRatio\" />\r\n#### quickRatio()\r\n\r\nReturn an upper bound on ratio() relatively quickly.\r\n\r\n<a name=\"realQuickRatio\" />\r\n#### realQuickRatio()\r\n\r\nReturn an upper bound on ratio() very quickly.\r\n\r\n```js\r\n>>> s = new difflib.SequenceMatcher(null, 'abcd', 'bcde');\r\n>>> s.ratio();\r\n0.75\r\n>>> s.quickRatio();\r\n0.75\r\n>>> s.realQuickRatio();\r\n1.0\r\n```\r\n\r\n<a name=\"Differ\" />\r\n### *class* difflib.**Differ**([linejunk[, charjunk]])\r\n\r\nThis is a class for comparing sequences of lines of text, \r\nand producing human-readable differences or deltas. \r\nDiffer uses [SequenceMatcher](#SequenceMatcher) both to compare \r\nsequences of lines, and to compare sequences of characters within \r\nsimilar (near-matching) lines.\r\n\r\nEach line of a Differ delta begins with a two-letter code:\r\n\r\n    Code    Meaning\r\n    '- '    line unique to sequence 1\r\n    '+ '    line unique to sequence 2\r\n    '  '    line common to both sequences\r\n    '? '    line not present in either input sequence\r\n\r\nLines beginning with `?` attempt to guide the eye to intraline differences, \r\nand were not present in either input sequence. \r\nThese lines can be confusing if the sequences contain tab characters.\r\n\r\nOptional parameters *linejunk* and *charjunk* are for filter functions (or **null**):\r\n\r\n*linejunk*: A function that accepts a single string argument, \r\nand returns true if the string is junk. \r\nThe default is **null**, meaning that no line is considered junk.\r\n\r\n*charjunk*: A function that accepts a single character argument \r\n(a string of length 1), and returns true if the character is junk. \r\nThe default is *null*, meaning that no character is considered junk.\r\n\r\n<a name=\"compare\" />\r\n#### compare(a, b)\r\n\r\nCompare two sequences of lines, and generate the delta (a sequence of lines).\r\n\r\nEach sequence must contain individual single-line strings ending with newlines.\r\n\r\n```js\r\n>>> d = new difflib.Differ()\r\n>>> d.compare(['one\\n', 'two\\n', 'three\\n'],\r\n...           ['ore\\n', 'tree\\n', 'emu\\n'])\r\n[ '- one\\n',\r\n  '?  ^\\n',\r\n  '+ ore\\n',\r\n  '?  ^\\n',\r\n  '- two\\n',\r\n  '- three\\n',\r\n  '?  -\\n',\r\n  '+ tree\\n',\r\n  '+ emu\\n' ]\r\n```\r\n\r\n<a name=\"contextDiff\" />\r\n### difflib.**contextDiff**(a, b, options)\r\n\r\nCompare *a* and *b* (lists of strings); \r\nreturn the delta lines in context diff format.\r\n\r\noptions:\r\n\r\n* fromfile\r\n* tofile\r\n* fromfiledate\r\n* tofiledate\r\n* n\r\n* lineterm\r\n\r\nContext diffs are a compact way of showing just the lines that \r\nhave changed plus a few lines of context. The changes are shown in a \r\nbefore/after style. \r\nThe number of context lines is set by n which defaults to three.\r\n\r\nBy default, the diff control lines (those with `***` or `---`) are created \r\nwith a trailing newline. \r\n\r\nFor inputs that do not have trailing newlines, set the lineterm argument \r\nto `\"\"` so that the output will be uniformly newline free.\r\n\r\nThe context diff format normally has a header for filenames and modification\r\ntimes. Any or all of these may be specified using strings for *fromfile*, \r\n*tofile*, *fromfiledate*, and *tofiledate*. \r\nThe modification times are normally expressed in the ISO 8601 format. \r\nIf not specified, the strings default to blanks.\r\n\r\n```js\r\n>>> var s1 = ['bacon\\n', 'eggs\\n', 'ham\\n', 'guido\\n']\r\n>>> var s2 = ['python\\n', 'eggy\\n', 'hamster\\n', 'guido\\n']\r\n>>> difflib.contextDiff(s1, s2, {fromfile:'before.py', tofile:'after.py'})\r\n[ '*** before.py\\n',\r\n  '--- after.py\\n',\r\n  '***************\\n',\r\n  '*** 1,4 ****\\n',\r\n  '! bacon\\n',\r\n  '! eggs\\n',\r\n  '! ham\\n',\r\n  '  guido\\n',\r\n  '--- 1,4 ----\\n',\r\n  '! python\\n',\r\n  '! eggy\\n',\r\n  '! hamster\\n',\r\n  '  guido\\n' ]\r\n```\r\n\r\n<a name=\"getCloseMatches\" />\r\n### difflib.*getCloseMatches*(word, possibilities\\[, n\\]\\[, cutoff\\])\r\n\r\nReturn a list of the best “good enough” matches. \r\n*word* is a sequence for which close matches are desired \r\n(typically a string), and *possibilities* is a list of sequences against \r\nwhich to match word (typically a list of strings).\r\n\r\nOptional argument *n* (default 3) is the maximum number of close \r\nmatches to return; *n* must be greater than 0.\r\n\r\nOptional argument *cutoff* (default 0.6) is a float in the range \r\n[0, 1]. \r\nPossibilities that don’t score at least that similar to word are ignored.\r\n\r\nThe best (no more than n) matches among the possibilities are \r\nreturned in a list, sorted by similarity score, most similar first.\r\n\r\n```js\r\n>>> difflib.getCloseMatches('appel', ['ape', 'apple', 'peach', 'puppy'])\r\n['apple', 'ape']\r\n```\r\n\r\n<a name=\"ndiff\" />\r\n### difflib.**ndiff**(a, b\\[, linejunk\\]\\[, charjunk\\])\r\n\r\nCompare *a* and b (lists of strings); \r\nreturn Differ-style delta lines\r\n\r\nOptional keyword parameters *linejunk* and *charjunk* are for \r\nfilter functions (or **null**):\r\n\r\n*linejunk*: A function that accepts a single string argument, \r\nand returns true if the string is junk, or false if not. \r\nThe default is (*null*).\r\n\r\n*charjunk*: A function that accepts a character (a string of length 1),\r\nand returns if the character is junk, or false if not. The default is \r\nmodule-level function [IS_CHARACTER_JUNK()](#IS_CHARACTER_JUNK), \r\nwhich filters out whitespace characters (a blank or tab; note: \r\nbad idea to include newline in this!).\r\n\r\n```js\r\n>>> a = ['one\\n', 'two\\n', 'three\\n']\r\n>>> b = ['ore\\n', 'tree\\n', 'emu\\n']\r\n>>> difflib.ndiff(a, b)\r\n[ '- one\\n',\r\n  '?  ^\\n',\r\n  '+ ore\\n',\r\n  '?  ^\\n',\r\n  '- two\\n',\r\n  '- three\\n',\r\n  '?  -\\n',\r\n  '+ tree\\n',\r\n  '+ emu\\n' ]\r\n```\r\n\r\n<a name=\"restore\" />\r\n### difflib.**restore**(sequence, which)\r\n\r\nReturn one of the two sequences that generated a delta.\r\n\r\nGiven a sequence produced by Differ.compare() or ndiff(), \r\nextract lines originating from file 1 or 2 (parameter which), stripping off line prefixes.\r\n\r\n```js\r\n>>> a = ['one\\n', 'two\\n', 'three\\n']\r\n>>> b = ['ore\\n', 'tree\\n', 'emu\\n']\r\n>>> diff = difflib.ndiff(a, b)\r\n>>> difflib.restore(diff, 1)\r\n[ 'one\\n',\r\n  'two\\n',\r\n  'three\\n' ]\r\n>>> restore(diff, 2)\r\n[ 'ore\\n',\r\n  'tree\\n',\r\n  'emu\\n' ]\r\n```\r\n\r\n<a name=\"unifiedDiff\" />\r\n### difflib.**unifiedDiff**(a, b, options)\r\n\r\nCompare a and b (lists of strings); \r\nreturn delta lines in unified diff format.\r\n\r\noptions:\r\n\r\n* fromfile\r\n* tofile\r\n* fromfiledate\r\n* tofiledate\r\n* n\r\n* lineterm\r\n\r\nUnified diffs are a compact way of showing just the lines that have \r\nchanged plus a few lines of context. \r\nThe changes are shown in a inline style (instead of separate before/after \r\nblocks). \r\nThe number of context lines is set by n which defaults to three.\r\n\r\nBy default, the diff control lines (those with `---`, `+++`, or `@@`) are \r\ncreated with a trailing newline. \r\n\r\nFor inputs that do not have trailing newlines, set the lineterm argument \r\nto `\"\"` so that the output will be uniformly newline free.\r\n\r\nThe context diff format normally has a header for filenames and modification\r\ntimes. Any or all of these may be specified using strings for *fromfile*, \r\n*tofile*, *fromfiledate*, and *tofiledate*. \r\nThe modification times are normally expressed in the ISO 8601 format.\r\nIf not specified, the strings default to blanks.\r\n\r\n```js\r\n>>> difflib.unifiedDiff('one two three four'.split(' '),\r\n...                     'zero one tree four'.split(' '), {\r\n...                       fromfile: 'Original'\r\n...                       tofile: 'Current',\r\n...                       fromfiledate: '2005-01-26 23:30:50',\r\n...                       tofiledate: '2010-04-02 10:20:52',\r\n...                       lineterm: ''\r\n...                     })\r\n[ '--- Original\\t2005-01-26 23:30:50',\r\n  '+++ Current\\t2010-04-02 10:20:52',\r\n  '@@ -1,4 +1,4 @@',\r\n  '+zero',\r\n  ' one',\r\n  '-two',\r\n  '-three',\r\n  '+tree',\r\n  ' four' ]\r\n```\r\n\r\n\r\n<a name=\"IS_LINE_JUNK\" />\r\n### difflib.**IS\\_LINE\\_JUNK**(line)\r\n\r\nReturn true for ignorable lines. The line line is ignorable if *line* is \r\nblank or contains a single `'#'`, otherwise it is not ignorable.\r\n\r\n<a name=\"IS_CHARACTER_JUNK\" />\r\n### difflib.**IS\\_CHARACTER\\_JUNK**(ch)\r\n\r\nReturn true for ignorable characters. The character *ch* is ignorable if ch\r\nis a space or tab, otherwise it is not ignorable. \r\nUsed as a default for parameter charjunk in [ndiff()](#ndiff).\r\n\r\n\r\nLicense\r\n-------\r\n\r\nPorted by Xueqiao Xu &lt;xueqiaoxu@gmail.com&gt;\r\n\r\nPSF LICENSE AGREEMENT FOR PYTHON 2.7.2\r\n\r\n1. This LICENSE AGREEMENT is between the Python Software Foundation (“PSF”), and the Individual or Organization (“Licensee”) accessing and otherwise using Python 2.7.2 software in source or binary form and its associated documentation.\r\n2. Subject to the terms and conditions of this License Agreement, PSF hereby grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 2.7.2 alone or in any derivative version, provided, however, that PSF’s License Agreement and PSF’s notice of copyright, i.e., “Copyright © 2001-2012 Python Software Foundation; All Rights Reserved” are retained in Python 2.7.2 alone or in any derivative version prepared by Licensee.\r\n3. In the event Licensee prepares a derivative work that is based on or incorporates Python 2.7.2 or any part thereof, and wants to make the derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 2.7.2.\r\n4. PSF is making Python 2.7.2 available to Licensee on an “AS IS” basis. PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED. BY WAY OF EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 2.7.2 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.\r\n5. PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 2.7.2 FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 2.7.2, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.\r\n6. This License Agreement will automatically terminate upon a material breach of its terms and conditions.\r\n7. Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee. This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.\r\n8. By copying, installing or otherwise using Python 2.7.2, Licensee agrees to be bound by the terms and conditions of this License Agreement.","tagline":"Text diff library in JavaScript, ported from Python's difflib module.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}